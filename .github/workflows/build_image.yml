name: Build Docker Image

on:
  workflow_dispatch:
    inputs:
      image_name:
        description: 'Name of the image to build: validate_data / extract_features / train_rf'
        required: true
        type: string
      data_version:
        description: 'Git commit hash of .dvc data version'
        required: true
        type: string
        default: 'master_latest'

jobs:
  build:
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      pull-requests: write
    env:
      IMAGE_NAME: ${{ github.event.inputs.image_name }}

    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

    - name: Set data version
      run: |
        if [ "${{ github.event.inputs.data_version }}" = "master_latest" ]; then
          echo "Using latest ICAIF_KAGGLE.dvc from master branch"
          git show origin/master:ICAIF_KAGGLE.dvc > ICAIF_KAGGLE.dvc
          echo "DATA_VERSION=master_latest" >> $GITHUB_ENV
        else
          echo "Using ICAIF_KAGGLE.dvc from commit ${{ github.event.inputs.data_version }}"
          git show ${{ github.event.inputs.data_version }}:ICAIF_KAGGLE.dvc > ICAIF_KAGGLE.dvc
          echo "DATA_VERSION=${{ github.event.inputs.data_version }}" >> $GITHUB_ENV
        fi
        echo "Updated ICAIF_KAGGLE.dvc to version from commit ${{ github.event.inputs.data_version }}"

    - name: Set commit hash
      run: echo "VERSION=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

    - name: Set up Python
      uses: actions/setup-python@7f4fc3e22c37d6ff65e88745f38bd3157c663f7c
      with:
        python-version: '3.10'

    - name: Copy CI tools to src directory
      run: |
        cp tools/ci/* src/
        mkdir -p models

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Install DVC
      run: |
        pip install dvc[s3]

    - name: Pull data with DVC
      run: |
        dvc pull
        echo "DVC pull completed successfully"
        echo "Contents of ICAIF_KAGGLE directory:"
        ls -R ICAIF_KAGGLE/ || echo "ICAIF_KAGGLE directory not found"

        # Temporarily allow git to track ICAIF_KAGGLE directory
        sed -i 's|^/ICAIF_KAGGLE|#/ICAIF_KAGGLE|' .gitignore
        git add ICAIF_KAGGLE/
        git commit -m "tmp"

    - name: Build Docker image
      run: |
        docker build -f src/Dockerfile.${{ env.IMAGE_NAME }} -t ${{ env.IMAGE_NAME }}:${{ env.VERSION }} .

    - name: Run Docker container
      if: startsWith(env.IMAGE_NAME, 'train_')
      run: |
        docker run --rm -v $(pwd)/models:/app/models ${{ env.IMAGE_NAME }}:${{ env.VERSION }}
        echo "Container execution completed successfully"

    - name: Run Docker container
      if: startsWith(env.IMAGE_NAME, 'extract_features')
      run: |
        docker run --rm -v $(pwd)/extracted_data:/app/extracted_data ${{ env.IMAGE_NAME }}:${{ env.VERSION }}
        echo "Container execution completed successfully"
        mkdir -p ICAIF_KAGGLE/extracted/
        cp $(pwd)/extracted_data/* ICAIF_KAGGLE/extracted/

    - name: Run Docker container
      if: startsWith(env.IMAGE_NAME, 'validate_data')
      run: |
        docker run --rm -v $(pwd)/validated_data:/app/validated_data ${{ env.IMAGE_NAME }}:${{ env.VERSION }}
        echo "Container execution completed successfully"
        mkdir -p ICAIF_KAGGLE/validated/
        cp $(pwd)/validated_data/* ICAIF_KAGGLE/validated/

    - name: Check for changes after DVC operations
      id: check_changes
      run: |
        # Check for any changes (modified, staged, or untracked files) in ICAIF_KAGGLE directory
        if [ -z "$(git status --porcelain ICAIF_KAGGLE/)" ]; then
          echo "No changes detected in ICAIF_KAGGLE directory"
          echo "HAS_CHANGES=false" >> $GITHUB_OUTPUT
        else
          echo "Changes detected in ICAIF_KAGGLE directory"
          git status --porcelain ICAIF_KAGGLE/
          echo "HAS_CHANGES=true" >> $GITHUB_OUTPUT
        fi

        # Restore gitignore to original state
        git reset HEAD~
        sed -i 's|^#/ICAIF_KAGGLE|/ICAIF_KAGGLE|' .gitignore

    - name: Add new data to DVC and push
      if: steps.check_changes.outputs.HAS_CHANGES == 'true'
      run: |
        dvc add ICAIF_KAGGLE
        dvc push
        echo "DVC operations completed successfully"

    - name: Create Pull Request for DVC changes
      if: steps.check_changes.outputs.HAS_CHANGES == 'true'
      uses: peter-evans/create-pull-request@c5a7806660adbe173f04e3e038b0ccdcd758773c
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "feat: data version update from ${{ env.IMAGE_NAME }} build"
        title: "Update data version from ${{ env.IMAGE_NAME }} build"
        body: |
          ## New data version

          Generated by `${{ env.IMAGE_NAME }}` build [`${{ github.run_id }}`](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
        branch: "ci/${{ env.IMAGE_NAME }}-${{ env.VERSION }}"
        delete-branch: true
        draft: false

    - name: Upload model artifacts
      if: startsWith(env.IMAGE_NAME, 'train_')
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
      with:
        name: ${{ env.IMAGE_NAME }}-artifacts-${{ env.VERSION }}
        path: models/
        retention-days: 1

    - name: Upload extracted data artifacts
      if: startsWith(env.IMAGE_NAME, 'extract_features')
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
      with:
        name: ${{ env.IMAGE_NAME }}-artifacts-${{ env.VERSION }}
        path: extracted_data/
        retention-days: 1

    - name: Upload validated data artifacts
      if: startsWith(env.IMAGE_NAME, 'validate_data')
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
      with:
        name: ${{ env.IMAGE_NAME }}-artifacts-${{ env.VERSION }}
        path: validated_data/
        retention-days: 1

    - name: Save Docker image as tar archive
      run: |
        docker save ${{ env.IMAGE_NAME }}:${{ env.VERSION }} -o ${{ env.IMAGE_NAME }}-${{ env.VERSION }}.tar
        gzip ${{ env.IMAGE_NAME }}-${{ env.VERSION }}.tar
        ls -lh ${{ env.IMAGE_NAME }}-${{ env.VERSION }}.tar.gz

    - name: Upload Docker image artifact
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
      with:
        name: ${{ env.IMAGE_NAME }}-docker-image-${{ env.VERSION }}
        path: ${{ env.IMAGE_NAME }}-${{ env.VERSION }}.tar.gz
        retention-days: 1
