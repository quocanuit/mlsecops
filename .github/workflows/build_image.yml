name: Build Docker Image

on:
  workflow_dispatch:
    inputs:
      image_name:
        description: 'Name of the image to build (e.g., train_rf, validate_data)'
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    env:
      IMAGE_NAME: ${{ github.event.inputs.image_name }}

    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

    - name: Set commit hash
      run: echo "VERSION=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

    - name: Set up Python
      uses: actions/setup-python@7f4fc3e22c37d6ff65e88745f38bd3157c663f7c
      with:
        python-version: '3.10'

    - name: Copy CI tools to src directory
      run: |
        cp tools/ci/* src/
        mkdir -p models

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Install DVC
      run: |
        pip install dvc[s3]

    - name: Pull data with DVC
      run: |
        dvc pull
        echo "DVC pull completed successfully"
        echo "Contents of ICAIF_KAGGLE directory:"
        ls -R ICAIF_KAGGLE/ || echo "ICAIF_KAGGLE directory not found"

    - name: Build Docker image
      run: |
        docker build -f src/Dockerfile.${{ env.IMAGE_NAME }} -t ${{ env.IMAGE_NAME }}:${{ env.VERSION }} .

    - name: Run Docker container
      if: startsWith(env.IMAGE_NAME, 'train_')
      run: |
        docker run --rm -v $(pwd)/models:/app/models ${{ env.IMAGE_NAME }}:${{ env.VERSION }}
        echo "Container execution completed successfully"

    - name: Run Docker container
      if: startsWith(env.IMAGE_NAME, 'extract_features')
      run: |
        docker run --rm -v $(pwd)/extracted_data:/app/extracted_data ${{ env.IMAGE_NAME }}:${{ env.VERSION }}
        echo "Container execution completed successfully"

    - name: Run Docker container
      if: startsWith(env.IMAGE_NAME, 'validate_data')
      run: |
        docker run --rm -v $(pwd)/validated_data:/app/validated_data ${{ env.IMAGE_NAME }}:${{ env.VERSION }}
        echo "Container execution completed successfully"

    - name: Upload model artifacts
      if: startsWith(env.IMAGE_NAME, 'train_')
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
      with:
        name: ${{ env.IMAGE_NAME }}-artifacts-${{ env.VERSION }}
        path: models/
        retention-days: 1

    - name: Upload extracted data artifacts
      if: startsWith(env.IMAGE_NAME, 'extract_features')
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
      with:
        name: ${{ env.IMAGE_NAME }}-artifacts-${{ env.VERSION }}
        path: extracted_data/
        retention-days: 1

    - name: Upload validated data artifacts
      if: startsWith(env.IMAGE_NAME, 'validate_data')
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
      with:
        name: ${{ env.IMAGE_NAME }}-artifacts-${{ env.VERSION }}
        path: validated_data/
        retention-days: 1

    - name: Save Docker image as tar archive
      run: |
        docker save ${{ env.IMAGE_NAME }}:${{ env.VERSION }} -o ${{ env.IMAGE_NAME }}-${{ env.VERSION }}.tar
        gzip ${{ env.IMAGE_NAME }}-${{ env.VERSION }}.tar
        ls -lh ${{ env.IMAGE_NAME }}-${{ env.VERSION }}.tar.gz

    - name: Upload Docker image artifact
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
      with:
        name: ${{ env.IMAGE_NAME }}-docker-image-${{ env.VERSION }}
        path: ${{ env.IMAGE_NAME }}-${{ env.VERSION }}.tar.gz
        retention-days: 1
